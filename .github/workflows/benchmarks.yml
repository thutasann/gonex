name: Benchmark Suite

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run benchmarks on'
        required: true
        default: 'master'
        type: string

jobs:
  benchmarks:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.event.inputs.branch == 'master'
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'master' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install root project dependencies
        run: npm ci

      - name: Build root project
        run: npm run build

      - name: Install benchmark dependencies
        working-directory: ./benchmarks
        run: npm install

      - name: Run benchmarks
        working-directory: ./benchmarks
        run: npm run benchmark

      - name: Display benchmark summary
        working-directory: ./benchmarks
        run: |
          echo "📊 Benchmark Results Generated"
          echo "================================"
          ls -la results/
          echo ""
          echo "📝 Latest Results:"
          if [ -f results/*.md ]; then
            head -n 20 results/*.md | tail -n +1
          fi

      - name: Prepare benchmark results for GitHub
        run: |
          # Create timestamp for this run
          TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S")
          COMMIT_SHA="${{ github.sha }}"
          BRANCH_NAME="${{ github.event.inputs.branch || github.ref_name }}"

          # Create results directory structure
          mkdir -p github-results
          mkdir -p github-results/latest
          mkdir -p github-results/history/${TIMESTAMP}

          # Copy results to structured directories
          if [ -d "benchmarks/results" ]; then
            # Copy to history folder with timestamp
            cp -r benchmarks/results/* github-results/history/${TIMESTAMP}/
            
            # Copy to latest folder (overwrite previous)
            cp -r benchmarks/results/* github-results/latest/
            
            # Create index files
            echo "# Benchmark Results" > github-results/README.md
            echo "" >> github-results/README.md
            echo "## Latest Results" >> github-results/README.md
            echo "" >> github-results/README.md
            echo "📊 **Run Date:** $(date -u)" >> github-results/README.md
            echo "🌟 **Branch:** ${BRANCH_NAME}" >> github-results/README.md
            echo "🔗 **Commit:** [\`${COMMIT_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${COMMIT_SHA})" >> github-results/README.md
            echo "" >> github-results/README.md
            echo "### 📁 [View Latest Results](./latest/)" >> github-results/README.md
            echo "### 📈 [View Historical Results](./history/)" >> github-results/README.md
            echo "" >> github-results/README.md
            
            # Add quick summary if markdown files exist
            if [ -f benchmarks/results/*.md ]; then
              echo "## Quick Summary" >> github-results/README.md
              echo "" >> github-results/README.md
              echo "\`\`\`" >> github-results/README.md
              head -n 30 benchmarks/results/*.md >> github-results/README.md
              echo "\`\`\`" >> github-results/README.md
            fi
            
            # Create history index
            echo "# Benchmark History" > github-results/history/README.md
            echo "" >> github-results/history/README.md
            echo "All benchmark runs in chronological order:" >> github-results/history/README.md
            echo "" >> github-results/history/README.md
            ls -la github-results/history/ | grep "^d" | awk '{print "- [" $9 "](./", $9, "/)" }' | grep -v "README.md" >> github-results/history/README.md
          fi

      - name: Commit results to benchmark-results branch
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"

          # Check if benchmark-results branch exists
          git fetch origin benchmark-results:benchmark-results 2>/dev/null || git checkout --orphan benchmark-results

          # Switch to benchmark-results branch
          git checkout benchmark-results 2>/dev/null || echo "Already on benchmark-results branch"

          # Clear everything except .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' ! -name 'github-results' -exec rm -rf {} +

          # Move results to root
          if [ -d "github-results" ]; then
            mv github-results/* .
            rmdir github-results
          fi

          # Add and commit
          git add .
          git commit -m "📊 Benchmark results from ${{ github.event.inputs.branch || github.ref_name }} ($(date -u +"%Y-%m-%d %H:%M:%S UTC"))" || exit 0

          # Push to benchmark-results branch
          git push origin benchmark-results

      - name: Create GitHub Pages index (optional)
        run: |
          # Switch back to benchmark-results for Pages setup
          git checkout benchmark-results

          # Create a simple index.html for GitHub Pages (if enabled)
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Gonex Benchmark Results</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .header { border-bottom: 1px solid #eee; padding-bottom: 20px; margin-bottom: 30px; }
                  .section { margin: 20px 0; }
                  .link-button { display: inline-block; padding: 10px 20px; background: #0366d6; color: white; text-decoration: none; border-radius: 6px; margin: 5px; }
                  .link-button:hover { background: #0256cc; }
                  .timestamp { color: #666; font-size: 14px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🚀 Gonex Benchmark Results</h1>
                      <p>Performance benchmarks for the Gonex concurrency library</p>
                  </div>
                  
                  <div class="section">
                      <h2>📊 Latest Results</h2>
                      <a href="./latest/" class="link-button">View Latest Benchmarks</a>
                      <a href="./README.md" class="link-button">View README</a>
                  </div>
                  
                  <div class="section">
                      <h2>📈 Historical Data</h2>
                      <a href="./history/" class="link-button">Browse History</a>
                      <p class="timestamp">Results are updated automatically when benchmarks run</p>
                  </div>
                  
                  <div class="section">
                      <h2>🔗 Links</h2>
                      <a href="https://github.com/${{ github.repository }}" class="link-button">Main Repository</a>
                      <a href="https://github.com/${{ github.repository }}/tree/benchmark-results" class="link-button">Results Branch</a>
                  </div>
              </div>
          </body>
          </html>
          EOF

          # Commit the index.html
          git add index.html
          git commit -m "📄 Add GitHub Pages index" || echo "No changes to commit"
          git push origin benchmark-results

      - name: Upload benchmark artifacts (backup)
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.sha }}
          path: benchmarks/results/
          retention-days: 30

      - name: Comment with results links
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 📊 Benchmark Results

            🎯 **Latest Results:** [View on benchmark-results branch](https://github.com/${{ github.repository }}/tree/benchmark-results/latest)
            📈 **All Historical Results:** [View history](https://github.com/${{ github.repository }}/tree/benchmark-results/history)
            📁 **Artifacts:** Available in workflow artifacts as backup

            **Quick Access:**
            - 📋 [README](https://github.com/${{ github.repository }}/blob/benchmark-results/README.md)
            - 📊 [Latest JSON Results](https://github.com/${{ github.repository }}/tree/benchmark-results/latest)
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
